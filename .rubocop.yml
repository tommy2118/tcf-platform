AllCops:
  NewCops: enable
  SuggestExtensions: false

Style/Documentation:
  Enabled: false

# Disable false positives for service lifecycle methods
Naming/PredicateMethod:
  Enabled: false

Metrics/BlockLength:
  Exclude:
    - 'spec/**/*'
    - 'lib/cli/**/*'  # CLI modules use class_eval blocks

Metrics/MethodLength:
  Exclude:
    - 'lib/cli/**/*'
    - 'lib/docker_manager.rb'  # Service status method is complex by nature
    - 'lib/config_validator.rb'  # Complex validation logic
    - 'lib/security_manager.rb'  # Security methods need comprehensive logic
    - 'lib/config_generator.rb'  # Template validation requires comprehensive logic
    - 'lib/config_manager.rb'  # Service environment building is complex by nature
    - 'lib/configuration_exceptions.rb'  # Exception factories need comprehensive context
    - 'lib/performance_optimizer.rb'  # Performance measurement requires detailed logic

Metrics/AbcSize:
  Exclude:
    - 'lib/cli/**/*'
    - 'lib/config_validator.rb'
    - 'lib/security_manager.rb'
    - 'lib/config_manager.rb'  # Service environment building has high ABC due to complexity
    - 'lib/performance_optimizer.rb'  # Parallel processing requires multiple operations

Metrics/ClassLength:
  Exclude:
    - 'lib/docker_manager.rb'  # Core orchestration class is complex
    - 'lib/config_validator.rb'  # Comprehensive validation logic
    - 'lib/security_manager.rb'  # Extensive security functionality
    - 'lib/config_generator.rb'  # Comprehensive template and generation logic
    - 'lib/config_manager.rb'  # Core configuration management functionality
    - 'lib/performance_optimizer.rb'  # Comprehensive performance utilities

Metrics/ModuleLength:
  Exclude:
    - 'lib/cli/**/*'  # CLI command modules are inherently large

Metrics/CyclomaticComplexity:
  Max: 10
  Exclude:
    - 'lib/cli/**/*'  # CLI modules have complex conditional logic by design
    - 'lib/security_manager.rb'  # Password strength calculation requires complex logic
    - 'lib/config_manager.rb'  # Service configuration requires conditional logic

Metrics/PerceivedComplexity:
  Max: 10
  Exclude:
    - 'lib/cli/**/*'  # CLI modules have complex conditional logic by design
    - 'lib/security_manager.rb'  # Security algorithms require complex logic
    - 'lib/config_manager.rb'  # Configuration logic inherently complex

# Format strings are acceptable for table output
Style/FormatStringToken:
  Exclude:
    - 'lib/cli/status_commands.rb'

# Multiline block chains are acceptable in test scenarios
Style/MultilineBlockChain:
  Exclude:
    - 'spec/**/*'

# Duplicate branch bodies are acceptable in utility methods with similar error handling
Lint/DuplicateBranch:
  Exclude:
    - 'lib/config_manager.rb'  # Service configuration methods have similar fallback logic
    - 'lib/performance_optimizer.rb'  # Object size estimation has similar default cases